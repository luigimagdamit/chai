declare i32 @printf(i8*, ...)
define void @print_i1(i1 %b) {
entry:
    ; Format string to print "true" or "false"
    %true_str = alloca [6 x i8], align 1
    %false_str = alloca [7 x i8], align 1

    ; Store the strings "true" and "false" in memory
    store [6 x i8] c"true\0A\00", [6 x i8]* %true_str, align 1
    store [7 x i8] c"false\0A\00", [7 x i8]* %false_str, align 1

    ; Compare the boolean value (%b) to true (1)
    %is_true = icmp eq i1 %b, true

    ; If %b is true, print "true", otherwise print "false"
    br i1 %is_true, label %print_true, label %print_false

print_true:
    ; Call printf with "true" string
    %true_ptr = getelementptr inbounds [6 x i8], [6 x i8]* %true_str, i32 0, i32 0
    call i32 @printf(i8* %true_ptr)
    br label %done

print_false:
    ; Call printf with "false" string
    %false_ptr = getelementptr inbounds [7 x i8], [7 x i8]* %false_str, i32 0, i32 0
    call i32 @printf(i8* %false_ptr)
    br label %done

done:
    ret void
}
@fmt = private constant [4 x i8] c"%d\0A\00"

define void @print_i32(i32 %value) {
    %fmt_ptr = getelementptr [4 x i8], [4 x i8]* @fmt, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %fmt_ptr, i32 %value)
    ret void
}

define i32 @main(){
entry:
	%greeting = alloca i8*
	; pushing a new string on the stack ...
	%1 = getelementptr inbounds [13 x i8], [13 x i8]* @str0, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 1(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	store i8* %1, i8** %greeting				 ; storing item in a stack variable

	%intro = alloca i8*
	; pushing a new string on the stack ...
	%4 = getelementptr inbounds [13 x i8], [13 x i8]* @str1, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 4(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	store i8* %4, i8** %intro				 ; storing item in a stack variable

	%greeting_0 = load i8*, i8** %greeting ; 			 Llvm Load String
	%6 = getelementptr inbounds [13 x i8], [13 x i8]* @str0, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 6(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %6)											; Auto generated by LlvmCallPrint (print.rs)

	%greeting_1 = load i8*, i8** %greeting ; 			 Llvm Load String
	%9 = getelementptr inbounds [13 x i8], [13 x i8]* @str0, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 9(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %9)											; Auto generated by LlvmCallPrint (print.rs)

	%intro_0 = load i8*, i8** %intro ; 			 Llvm Load String
	%12 = getelementptr inbounds [13 x i8], [13 x i8]* @str1, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 12(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %12)											; Auto generated by LlvmCallPrint (print.rs)

	%intro_1 = load i8*, i8** %intro ; 			 Llvm Load String
	%15 = getelementptr inbounds [13 x i8], [13 x i8]* @str1, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 15(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %15)											; Auto generated by LlvmCallPrint (print.rs)

	%greeting_2 = load i8*, i8** %greeting ; 			 Llvm Load String
	%18 = getelementptr inbounds [13 x i8], [13 x i8]* @str0, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 18(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %18)											; Auto generated by LlvmCallPrint (print.rs)

	%a = alloca i32
	%21 = add i32 123, 0				; expr_pop
	store i32 %21, i32* %a			; int variable assignment (variable.rs)

	%b = alloca i32
	%22 = add i32 69, 0				; expr_pop
	store i32 %22, i32* %b			; int variable assignment (variable.rs)

	%a_0 = load i32, i32* %a 			 ; LlvmLoad load_i32
	%24 = add i32 %a_0, 0				; expr_pop
	call void @print_i32(i32 %24)

	%b_0 = load i32, i32* %b 			 ; LlvmLoad load_i32
	%27 = add i32 %b_0, 0				; expr_pop
	call void @print_i32(i32 %27)

	%a_1 = load i32, i32* %a 			 ; LlvmLoad load_i32
	%b_1 = load i32, i32* %b 			 ; LlvmLoad load_i32
	%31 = icmp ugt i32 %a_1, %b_1
	%32 = add i1 %31, 0				; expr_pop
	call void @print_i1(i1 %32)

	%a_2 = load i32, i32* %a 			 ; LlvmLoad load_i32
	%b_2 = load i32, i32* %b 			 ; LlvmLoad load_i32
	%35 = icmp ult i32 %a_2, %b_2
	%36 = add i1 %35, 0				; expr_pop
	call void @print_i1(i1 %36)

	%a_3 = load i32, i32* %a 			 ; LlvmLoad load_i32
	%b_3 = load i32, i32* %b 			 ; LlvmLoad load_i32
	%39 = icmp eq i32 %a_3, %b_3
	%40 = add i1 %39, 0				; expr_pop
	call void @print_i1(i1 %40)

	%a_4 = load i32, i32* %a 			 ; LlvmLoad load_i32
	%b_4 = load i32, i32* %b 			 ; LlvmLoad load_i32
	%43 = add i32 %b_4, 54
	%44 = icmp eq i32 %a_4, %43
	%45 = add i1 %44, 0				; expr_pop
	call void @print_i1(i1 %45)

	%47 = getelementptr inbounds [13 x i8], [13 x i8]* @str1, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 47(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %47)											; Auto generated by LlvmCallPrint (print.rs)

	%51 = getelementptr inbounds [13 x i8], [13 x i8]* @str2, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 51(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %51)											; Auto generated by LlvmCallPrint (print.rs)

	; pushing a new string on the stack ...
	%55 = getelementptr inbounds [32 x i8], [32 x i8]* @str2, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 55(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %55)											; Auto generated by LlvmCallPrint (print.rs)

	; pushing a new string on the stack ...
	%59 = getelementptr inbounds [21 x i8], [21 x i8]* @str3, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 59(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %59)											; Auto generated by LlvmCallPrint (print.rs)

	%i = alloca i32
	%62 = add i32 24, 0				; expr_pop
	store i32 %62, i32* %i			; int variable assignment (variable.rs)

	%i_0 = load i32, i32* %i 			 ; LlvmLoad load_i32
	%64 = add i32 %i_0, 0				; expr_pop
	call void @print_i32(i32 %64)

	%flag = alloca i1
	%66 = icmp ult i32 1, 2
	%67 = add i1 %66, 0				; expr_pop
	call void @print_i1(i1 %67)

	%68 = icmp ugt i32 3, 1
	%69 = add i1 %68, 0				; expr_pop
	call void @print_i1(i1 %69)

	%70 = icmp eq i32 2, 3
	%71 = add i1 %70, 0				; expr_pop
	call void @print_i1(i1 %71)

	%73 = add i1 1, 0				; expr_pop
	call void @print_i1(i1 %73)

	%75 = add i1 0, 0				; expr_pop
	call void @print_i1(i1 %75)

	%seppuku = alloca i8*
	; pushing a new string on the stack ...
	%77 = getelementptr inbounds [21 x i8], [21 x i8]* @str4, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 77(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	store i8* %77, i8** %seppuku				 ; storing item in a stack variable

	%seppuku_0 = load i8*, i8** %seppuku ; 			 Llvm Load String
	%79 = getelementptr inbounds [21 x i8], [21 x i8]* @str4, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 79(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %79)											; Auto generated by LlvmCallPrint (print.rs)

	ret i32 0
}
@str2 = private unnamed_addr constant [33 x i8] c"here is me declaring a variable\0A\00", align 1
@str3 = private unnamed_addr constant [22 x i8] c"this is the variable\0A\00", align 1
@str1 = private unnamed_addr constant [14 x i8] c"this is chai\0A\00", align 1
@str0 = private unnamed_addr constant [14 x i8] c"hello world!\0A\00", align 1
@str4 = private unnamed_addr constant [22 x i8] c"ok shutting down now\0A\00", align 1
