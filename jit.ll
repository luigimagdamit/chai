@fmt = private constant [4 x i8] c"%d\0A\00"declare i32 @printf(i8*, ...)
define void @print_i32(i32 %value) {
    %fmt_ptr = getelementptr [4 x i8], [4 x i8]* @fmt, i32 0, i32 0
    call i32 (i8*, ...) @printf(i8* %fmt_ptr, i32 %value)
    ret void
}define void @print_i1(i1 %b) {
entry:
    ; Format string to print "true" or "false"
    %true_str = alloca [6 x i8], align 1
    %false_str = alloca [7 x i8], align 1

    ; Store the strings "true" and "false" in memory
    store [6 x i8] c"true\0A\00", [6 x i8]* %true_str, align 1
    store [7 x i8] c"false\0A\00", [7 x i8]* %false_str, align 1

    ; Compare the boolean value (%b) to true (1)
    %is_true = icmp eq i1 %b, true

    ; If %b is true, print "true", otherwise print "false"
    br i1 %is_true, label %print_true, label %print_false

print_true:
    ; Call printf with "true" string
    %true_ptr = getelementptr inbounds [6 x i8], [6 x i8]* %true_str, i32 0, i32 0
    call i32 @printf(i8* %true_ptr)
    br label %done

print_false:
    ; Call printf with "false" string
    %false_ptr = getelementptr inbounds [7 x i8], [7 x i8]* %false_str, i32 0, i32 0
    call i32 @printf(i8* %false_ptr)
    br label %done

done:
    ret void
}
define i32 @main() {
entry:

	%greeting = alloca i8*
	; pushing a new string on the stack ..."hello world!"
	%0 = getelementptr inbounds [13 x i8], [13 x i8]* @str0, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 0(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	store i8* %0, i8** %greeting				 ; storing item in a stack variable

	%intro = alloca i8*
	; pushing a new string on the stack ..."this is chai"
	%1 = getelementptr inbounds [13 x i8], [13 x i8]* @str1, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 1(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	store i8* %1, i8** %intro				 ; storing item in a stack variable

	%greeting_0 = load i8*, i8** %greeting ; 			 Llvm Load String
	%2 = getelementptr inbounds [13 x i8], [13 x i8]* @str0, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 2(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %2)											; Auto generated by LlvmCallPrint (print.rs)

	%greeting_1 = load i8*, i8** %greeting ; 			 Llvm Load String
	%4 = getelementptr inbounds [13 x i8], [13 x i8]* @str0, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 4(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %4)											; Auto generated by LlvmCallPrint (print.rs)

	%intro_0 = load i8*, i8** %intro ; 			 Llvm Load String
	%6 = getelementptr inbounds [13 x i8], [13 x i8]* @str1, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 6(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %6)											; Auto generated by LlvmCallPrint (print.rs)

	%intro_1 = load i8*, i8** %intro ; 			 Llvm Load String
	%8 = getelementptr inbounds [13 x i8], [13 x i8]* @str1, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 8(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %8)											; Auto generated by LlvmCallPrint (print.rs)

	%greeting_2 = load i8*, i8** %greeting ; 			 Llvm Load String
	%10 = getelementptr inbounds [13 x i8], [13 x i8]* @str0, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 10(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %10)											; Auto generated by LlvmCallPrint (print.rs)

	%a = alloca i32
	%12 = add i32 123, 0				; expr_pop
	store i32 %12, i32* %a			; int variable assignment (variable.rs)

	%b = alloca i32
	%13 = add i32 69, 0				; expr_pop
	store i32 %13, i32* %b			; int variable assignment (variable.rs)

	%a_0 = load i32, i32* %a 			 ; LlvmLoad load_i32
	%14 = add i32 %a_0, 0				; expr_pop
	call void @print_i32(i32 %14)

	%b_0 = load i32, i32* %b 			 ; LlvmLoad load_i32
	%16 = add i32 %b_0, 0				; expr_pop
	call void @print_i32(i32 %16)

	%a_1 = load i32, i32* %a 			 ; LlvmLoad load_i32
	%b_1 = load i32, i32* %b 			 ; LlvmLoad load_i32
	%18 = icmp ugt i32 %a_1, %b_1
	%19 = add i1 %18, 0				; expr_pop
	call void @print_i1(i1 %19)

	%a_2 = load i32, i32* %a 			 ; LlvmLoad load_i32
	%b_2 = load i32, i32* %b 			 ; LlvmLoad load_i32
	%21 = icmp ult i32 %a_2, %b_2
	%22 = add i1 %21, 0				; expr_pop
	call void @print_i1(i1 %22)

	%a_3 = load i32, i32* %a 			 ; LlvmLoad load_i32
	%b_3 = load i32, i32* %b 			 ; LlvmLoad load_i32
	%24 = icmp eq i32 %a_3, %b_3
	%25 = add i1 %24, 0				; expr_pop
	call void @print_i1(i1 %25)

	%a_4 = load i32, i32* %a 			 ; LlvmLoad load_i32
	%b_4 = load i32, i32* %b 			 ; LlvmLoad load_i32
	%27 = add i32 %b_4, 54
	%28 = icmp eq i32 %a_4, %27
	%29 = add i1 %28, 0				; expr_pop
	call void @print_i1(i1 %29)

	%31 = getelementptr inbounds [13 x i8], [13 x i8]* @str1, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 31(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %31)											; Auto generated by LlvmCallPrint (print.rs)

	%33 = getelementptr inbounds [13 x i8], [13 x i8]* @str2, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 33(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %33)											; Auto generated by LlvmCallPrint (print.rs)

	; pushing a new string on the stack ..."here is me declaring a variable"
	%35 = getelementptr inbounds [32 x i8], [32 x i8]* @str2, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 35(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %35)											; Auto generated by LlvmCallPrint (print.rs)

	; pushing a new string on the stack ..."this is the variable"
	%37 = getelementptr inbounds [21 x i8], [21 x i8]* @str3, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 37(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %37)											; Auto generated by LlvmCallPrint (print.rs)

	%i = alloca i32
	%39 = add i32 24, 0				; expr_pop
	store i32 %39, i32* %i			; int variable assignment (variable.rs)

	%40 = add i32 50, 0				; expr_pop
	store i32 50, i32* %i		 ; set symbol (symbol.rs)

					; parse_set_variable
	%i_0 = load i32, i32* %i 			 ; LlvmLoad load_i32
	%41 = add i32 %i_0, 0				; expr_pop
	call void @print_i32(i32 %41)

	%flag = alloca i1
	%43 = icmp ult i32 1, 2
	%44 = add i1 %43, 0				; expr_pop
	call void @print_i1(i1 %44)

	%46 = icmp ugt i32 3, 1
	%47 = add i1 %46, 0				; expr_pop
	call void @print_i1(i1 %47)

	%49 = icmp eq i32 2, 3
	%50 = add i1 %49, 0				; expr_pop
	call void @print_i1(i1 %50)

	%52 = add i1 1, 0				; expr_pop
	call void @print_i1(i1 %52)

	%54 = add i1 0, 0				; expr_pop
	call void @print_i1(i1 %54)

	%seppuku = alloca i8*
	; pushing a new string on the stack ..."ok shutting down now"
	%56 = getelementptr inbounds [21 x i8], [21 x i8]* @str4, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 56(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	store i8* %56, i8** %seppuku				 ; storing item in a stack variable

	%seppuku_0 = load i8*, i8** %seppuku ; 			 Llvm Load String
	%57 = getelementptr inbounds [21 x i8], [21 x i8]* @str4, i32 0, i32 0 ; llvm_retrieve_static_string		;LLVM Register for String @ ExprCount 57(variable.rs) 				; Printing a string type (expr_pop - register increment by LlvmTempRegister)
	call i32 (i8*, ...) @printf(i8* %57)											; Auto generated by LlvmCallPrint (print.rs)


ret i32 0 ; llvm_main_close
}@str0 = private unnamed_addr constant [14 x i8] c"hello world!\0A\00", align 1
@str3 = private unnamed_addr constant [22 x i8] c"this is the variable\0A\00", align 1
@str2 = private unnamed_addr constant [33 x i8] c"here is me declaring a variable\0A\00", align 1
@str4 = private unnamed_addr constant [22 x i8] c"ok shutting down now\0A\00", align 1
@str1 = private unnamed_addr constant [14 x i8] c"this is chai\0A\00", align 1
