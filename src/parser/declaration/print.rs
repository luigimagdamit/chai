use crate::parser::expression::expr::{Binary, DataType, Expression};
use crate::parser::expression::expression::expression;
use crate::parser::parser::{AstNode, Parser};
use crate::{llvm::llvm_print::llvm_call_print_local, scanner::token::TokenType};
use crate::parser::declaration::declaration::{Statement, Declaration};


pub fn print_statement(parser: &mut Parser) {
    expression(parser);
    let expr_ast = parser.ast_stack.pop();


    if let Some(ast_node) = expr_ast { 
        match ast_node.to_expression() {
            Expression::Binary(b) => {
                parser.emit_instruction(&b.llvm_print());
                parser.ast_stack.push(AstNode::from(Statement::new_print_statement(Expression::from(b))));
            },
            Expression::Literal(l) => {
                parser.emit_instruction(&l.llvm_print(parser.expr_count));
                parser.ast_stack.push(AstNode::from(Statement::new_print_statement(Expression::from(l))));
            }
            _ => ()
        }

    }
    parser.expr_count += 1;

    // let (expr, top) = parser.expr_pop();
    // match &expr.data_type {
    //     DataType::Boolean(_) => parser.emit_instruction(&LlvmCallPrint::Integer(top).print_i1()),
    //     DataType::Integer(_) => parser.emit_instruction(&LlvmCallPrint::Integer(top).print_i32()),
    //     DataType::String (_) => parser.emit_instruction(&LlvmCallPrint::String(top).call_print())
    // }

    parser.consume(TokenType::Semicolon, "Expect semicolon after value");
}

pub enum LlvmCallPrint {
    String(u32), //register value
    Integer(u32),
}
impl LlvmCallPrint {
    pub fn call_print(&self) -> String {
        match self {
            Self::String(register) => format!("\tcall i32 (i8*, ...) @printf(i8* %{})\t\t\t\t\t\t\t\t\t\t\t; Auto generated by LlvmCallPrint (print.rs)\n", register),
            Self::Integer(_) => panic!()
        }
    }
    pub fn print_i32(&self) -> String {
        match self {
            Self::Integer(register) => llvm_call_print_local(register.clone(), "i32"),
            _ => panic!("Not a i32")
        }
    }
    pub fn print_i1(&self) -> String {
        match self {
            Self::Integer(register) => llvm_call_print_local(register.clone(), "i1"),
            _ => panic!("Not a i32")
        }
    }
}