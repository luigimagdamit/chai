use crate::parser::expression::expr::DataType;
use crate::parser::expression::expression::expression;
use crate::parser::parser::Parser;
use crate::{llvm::llvm_print::llvm_call_print_local, scanner::token::TokenType};

pub fn print_statement(parser: &mut Parser) {
    expression(parser);
    let expr = parser.expr_pop();
    match &expr.data_type {
        DataType::Boolean(_) => parser.emit_instruction(&LlvmCallPrint::Integer(parser.expr_top()).print_i1()),
        DataType::Integer(_) => parser.emit_instruction(&LlvmCallPrint::Integer(parser.expr_top()).print_i32()),
        DataType::String (_) => parser.emit_instruction(&LlvmCallPrint::String(parser.expr_top()).call_print())
    }
    parser.expr_count += 1;
    parser.consume(TokenType::Semicolon, "Expect semicolon after value");
}

pub enum LlvmCallPrint {
    String(u32), //register value
    Integer(u32),
}
impl LlvmCallPrint {
    pub fn call_print(&self) -> String {
        match self {
            Self::String(register) => format!("\tcall i32 (i8*, ...) @printf(i8* %{})\t\t\t\t\t\t\t\t\t\t\t; Auto generated by LlvmCallPrint (print.rs)\n", register),
            Self::Integer(_) => panic!()
        }
    }
    pub fn print_i32(&self) -> String {
        match self {
            Self::Integer(register) => llvm_call_print_local(register.clone(), "i32"),
            _ => panic!("Not a i32")
        }
    }
    pub fn print_i1(&self) -> String {
        match self {
            Self::Integer(register) => llvm_call_print_local(register.clone(), "i1"),
            _ => panic!("Not a i32")
        }
    }
}